Last week I took a technical challenge on HackerRank. One of the assignments was not like the others.
Usually I get to solve algorithms , like brackets, skyline, two sum and etc.
But this time they asked me to add functionality to VanillaJS MVC ToDo app.

The properly working app can be found here http://todomvc.com/examples/vanillajs/

I am taking a chance to dive into the code of the app as I have another couple of months before HackReactor.

There is a set of JavaScript files being loaded. I am my journey with the first one.
The logic being that later files rely on what has been loaded earlier.

Base.js:

It's an immediately invoked function. A lot of RegEx stuff. Looks like it is for parsing something.
From my understanding this does not influence the functionality of the app. Commenting the script proves it.
It implements a set of underscore library methods and other functions to display a block in left-upper side
when the app is launched on their homepage.

We skip it.

App.js

All the calls are made within this file. The rest of the files define/describe parts of MVC.
It also makes sure the view changes on link change

Helper.js

On the first look it is an implementation of jQuery functionality: select element, add listener, and delegate.
A couple of neat elegant tricks:
Recursion in search of a parent element
Copying array's forEach method to DOM NodeList, which allows to implement event delegation.

Store.js

This file defines the local storage and its methods. A store is not created here though.


...


Started jumping from file to another to understand the data flow.

View.js

Creates an object that defines/references elements on the page.

Controller.js

The 'bind' method threw me off. I have never seen BIND being used like this.
And the answer is that it is bind in view prototype is overwritten by developers.
Bind connects html values to js data

Data Flow

On the template there are objects that reference html elements and listen to changes.
Behavior that is connecting html with js is written in helper.js
Upon change in the page a listener triggers View within controller.
Controller passes data to Model.js.
Model.js takes Store.js object as an argument.

1. The App.js creates all the objects when the app starts/
2. Further logic is going through Controller.js

Template.js

Describes how ToDo items look.

Things I have learned:

!! - casting to boolean
